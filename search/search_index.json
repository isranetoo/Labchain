{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Labchain","text":"<p>Labchain is a simulator for chemistry laboratory experiments. It allows you to add reagents, set the temperature, and calculate the theoretical yield of a chemical reaction in a simple and intuitive way.</p>"},{"location":"#main-features","title":"Main Features","text":"<ul> <li>Add reagents with name and amount (in mol)</li> <li>Set the experiment temperature (\u00b0C)</li> <li>Automatic calculation of theoretical yield based on reagents and temperature</li> </ul> <p>Ideal for students, teachers, and chemistry enthusiasts who want to simulate experiments quickly and didactically.</p>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's how you can use Labchain in Python:</p> <pre><code>from labchain.simulator import Simulator\n\n# Create a simulator with a specific temperature\nsim = Simulator(temperature=30)\n\n# Add reagents (name, amount in mol)\nsim.add_reagent(\"Acetic Acid\", 0.5)\nsim.add_reagent(\"Ethanol\", 0.5)\n\n# Calculate the theoretical yield\nresult = sim.calculate_yield()\nprint(f\"Theoretical yield: {result:.2f}%\")\n</code></pre> <p>Expected output:</p> <pre><code>Theoretical yield: 11.25%\n</code></pre> <p>This example shows how to set up an experiment, add reagents, and calculate the yield easily.</p>"},{"location":"reference/","title":"API - Reference","text":"<p>Welcome to the Labchain API Reference! Here you will find clear and concise information about the main classes and methods that power the Labchain chemistry experiment simulator.</p>"},{"location":"reference/#simulator","title":"Simulator","text":"<p>The <code>Simulator</code> class is used to create and manage experiments. You can add reagents, set the temperature, and calculate the theoretical yield of your reactions.</p>"},{"location":"reference/#example","title":"Example","text":"<pre><code>from labchain.simulator import Simulator\n\nsim = Simulator(temperature=40)\nsim.add_reagent(\"Hydrogen Peroxide\", 0.2)\nsim.add_reagent(\"Potassium Iodide\", 0.1)\nyield_percent = sim.calculate_yield()\nprint(f\"Yield: {yield_percent:.2f}%\")\n</code></pre> <p>Expected output:</p> <pre><code>Yield: 3.00%\n</code></pre>"},{"location":"reference/#reagent","title":"Reagent","text":"<p>The <code>Reagent</code> class represents a chemical reagent, including its name and amount (in mol). Usually, you don't need to create <code>Reagent</code> objects directly; use <code>Simulator.add_reagent()</code> instead.</p> <p>Explore the automatic documentation below to understand how to use each component effectively:</p>"},{"location":"reference/#labchain.simulator.Reagent","title":"<code>Reagent</code>","text":"<p>Represents a chemical reagent.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the reagent.</p> required <code>amount</code> <code>float</code> <p>Amount in mol.</p> required Source code in <code>labchain\\labchain\\simulator.py</code> <pre><code>class Reagent:\n    \"\"\"\n    Represents a chemical reagent.\n\n    Args:\n        name (str): Name of the reagent.\n        amount (float): Amount in mol.\n    \"\"\"\n    def __init__(self, name: str, amount: float):\n        self.name = name\n        self.amount = amount\n</code></pre>"},{"location":"reference/#labchain.simulator.Simulator","title":"<code>Simulator</code>","text":"<p>Chemical experiment simulator.</p> <p>Parameters:</p> Name Type Description Default <code>temperature</code> <code>float</code> <p>Temperature in \u00b0C.</p> <code>25.0</code> Source code in <code>labchain\\labchain\\simulator.py</code> <pre><code>class Simulator:\n    \"\"\"\n    Chemical experiment simulator.\n\n    Args:\n        temperature (float): Temperature in \u00b0C.\n    \"\"\"\n    def __init__(self, temperature: float = 25.0):\n        self.temperature = temperature\n        self.reagents: List[Reagent] = []\n\n    def add_reagent(self, name: str, amount: float):\n        \"\"\"Adds a reagent to the experiment.\"\"\"\n        self.reagents.append(Reagent(name, amount))\n\n    def calculate_yield(self) -&gt; float:\n        \"\"\"\n        Calculates the theoretical yield based on temperature and reagents.\n\n        Returns:\n            float: Estimated yield percentage.\n        \"\"\"\n        base = sum(r.amount for r in self.reagents)\n        temp_factor = 1 + (self.temperature - 25) * 0.01\n        return min(100, base * temp_factor * 10)\n</code></pre>"},{"location":"reference/#labchain.simulator.Simulator.add_reagent","title":"<code>add_reagent(name, amount)</code>","text":"<p>Adds a reagent to the experiment.</p> Source code in <code>labchain\\labchain\\simulator.py</code> <pre><code>def add_reagent(self, name: str, amount: float):\n    \"\"\"Adds a reagent to the experiment.\"\"\"\n    self.reagents.append(Reagent(name, amount))\n</code></pre>"},{"location":"reference/#labchain.simulator.Simulator.calculate_yield","title":"<code>calculate_yield()</code>","text":"<p>Calculates the theoretical yield based on temperature and reagents.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Estimated yield percentage.</p> Source code in <code>labchain\\labchain\\simulator.py</code> <pre><code>def calculate_yield(self) -&gt; float:\n    \"\"\"\n    Calculates the theoretical yield based on temperature and reagents.\n\n    Returns:\n        float: Estimated yield percentage.\n    \"\"\"\n    base = sum(r.amount for r in self.reagents)\n    temp_factor = 1 + (self.temperature - 25) * 0.01\n    return min(100, base * temp_factor * 10)\n</code></pre>"}]}